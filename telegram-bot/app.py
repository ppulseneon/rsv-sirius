import uuid
from datetime import datetime

import telebot
from keyboards import menu_keyboard, hide_markup
from database import *
from api import *
from models.user import *

API_TOKEN = '7167879358:AAEaW8nrP_MOQTWnNUfeY-t7M6fybGVTuis'
bot = telebot.TeleBot(API_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    greeting_text = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
    msg = bot.send_message(message.chat.id, greeting_text, reply_markup=hide_markup)

    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
    user = User(message.chat.id)
    add_user(user)
    set_token(message.chat.id, register(message.chat.id))


@bot.message_handler(content_types=['text'])
def handle_text(message):
    user = find_user(message.chat.id)
    text = message.text

    if text == '–ó–∞–≤—ã—à–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, 'üìå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞', reply_markup=hide_markup)
        edit_status(message.chat.id, 'overprice-geo')
        return

    if text == '–ú–æ–∏ –∑–∞—è–≤–∫–∏':
        msg = bot.send_message(message.chat.id, '–ó–∞—è–≤–∫–∏', reply_markup=hide_markup)
        applications = get_applications(user)
        for app in applications['applications']:
            msg_app = f'<b>–ó–∞—è–≤–∫–∞ #{app["id"]}</b>: \n\n<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ: </b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ üü°\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b>{app["category"]}\n\n<b>–ú–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É:</b> {app["shop"]["address"]}'
            bot.send_message(message.chat.id, msg_app,  parse_mode='html', reply_markup=menu_keyboard)
        return

    if text == '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        msg = bot.send_message(message.chat.id, 'üìå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞', reply_markup=hide_markup)
        edit_status(message.chat.id, 'empty-geo')
        return

    if user.action == 'overprice-geo':
        coords = message.text.split(',')
        set_coords(message.chat.id, float(coords[0]), float(coords[1][1:]))
        edit_status(message.chat.id, 'overprice-photo')
        bot.send_message(message.chat.id,
                         f'‚úÖ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.')
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ü–µ–Ω–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –∑–∞–≤—ã—à–µ–Ω')
        return

    if user.action == 'empty-geo':
        coords = message.text.split(',')
        set_coords(message.chat.id, float(coords[0]), float(coords[1][1:]))
        edit_status(message.chat.id, 'empty-photo')
        bot.send_message(message.chat.id,
                         f'‚úÖ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.')
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å—Ç–∏–ª–∞–∂–∞, –≥–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–æ—Ü. —Ü–µ–Ω–µ')
        return

    # else
    msg = bot.send_message(message.chat.id, '–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É', reply_markup=menu_keyboard)

@bot.message_handler(content_types=['location'])
def handle_location(message):
    chat_id = message.chat.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    user = find_user(message.chat.id)
    if user.action == 'overprice-geo':
        set_coords(message.chat.id, latitude, longitude)
        edit_status(message.chat.id, 'overprice-photo')
        bot.send_message(chat_id,
                         f'‚úÖ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.')
        bot.send_message(chat_id,
                         f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ü–µ–Ω–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –∑–∞–≤—ã—à–µ–Ω')

    if user.action == 'empty-geo':
        set_coords(message.chat.id, latitude, longitude)
        edit_status(message.chat.id, 'empty-photo')
        bot.send_message(chat_id,
                         f'‚úÖ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.')
        bot.send_message(chat_id,
                         f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ —Å—Ç–∏–ª–∞–∂–∞, –≥–¥–µ –Ω–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã')

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user = find_user(message.chat.id)

    if user.action == 'overprice-photo':
        bot.send_message(message.chat.id, "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..")
        file_id = message.photo[-1].file_id
        file = bot.get_file(file_id)
        file_path = file.file_path

        image = f'temp/{uuid.uuid4()}.jpg'

        with open(image, 'wb') as photo:
            photo.write(requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(API_TOKEN, file_path)).content)

        image_uri = uploadPhoto(user, image)
        result = add_application(user, image_uri)

        print(result)

        code = result.get('status_code', None)

        if code == 404:
            bot.send_message(message.chat.id, f'‚ùå {result["detail"]}')
            return

        created_at = result["created_at"]
        date_obj = datetime.strptime(created_at, "%Y-%m-%dT%H:%M:%S.%f")
        formatted_date = date_obj.strftime("%d.%m.%Y")

        msg_result = f'<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —á–µ–∫–µ:</b>\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {result["category"]}\n\n<b>–¶–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:</b> {result["price"]} —Ä—É–±.\n\n<b>–î–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞:</b> {result["max_price"]} —Ä—É–±.\n\n<b>–ê–¥—Ä–µ—Å:</b> {result["shop"]["address"]}\n\n\n<i>{result["shop"]["name"]}</i>'
        msg_result_2 = f'<b>–¶–µ–Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –≤—ã—à–µ —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–∞—è.</b>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã. –û–∂–∏–¥–∞–π—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã.\n\n<b>–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> {result["id"]}\n–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {formatted_date}'

        bot.send_message(message.chat.id, msg_result, parse_mode='html')
        bot.send_message(message.chat.id, msg_result_2, parse_mode='html', reply_markup=menu_keyboard)

        edit_status(message.chat.id, None)
    if user.action == 'empty-photo':
        bot.send_message(message.chat.id, f'‚ùå –ù–∞ –ø–æ–ª–∫–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ.', reply_markup=menu_keyboard)
        edit_status(message.chat.id, None)

print('start')
bot.polling()